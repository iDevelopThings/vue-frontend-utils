import jetpack from "fs-jetpack";
import ts from "typescript";
import {ResolvedConfig} from "vite";

export type UserPluginConfig = {
	srcPathFromRoot?: string;
	tsConfigPathFromRoot?: string;
}

export const FileNames = {
	EventDeclaration : "EventDeclaration.d.ts",
	ModalDeclaration : "EventDeclaration.d.ts",
};

export type FileNameKeys = typeof FileNames;

class PluginConfigInstance {

	public isLocalDev: boolean = false;

	public tsConfigPathFromRoot: string = "tsconfig.json";

	/**
	 * The project root dir
	 * @type {string}
	 */
	public projectRoot?: string;
	/**
	 * Filesystem instance for the project root
	 * @type {typeof jetpack}
	 */
	public projectRootDirectory: typeof jetpack;

	public projectSrc: string = "src";
	public projectSrcDirectory: typeof jetpack;

	/**
	 * The directory name inside the stores path where
	 * all generated files will be written
	 * @type {string}
	 */
	public generatedDirName: string = ".generated";
	/**
	 * Filesystem instance for the generated files path
	 * @type {typeof jetpack}
	 */
	public generatedDir: typeof jetpack;
	/**
	 * The resolved vite configuration
	 *
	 * @type {ResolvedConfig}
	 * @private
	 */
	public viteConfig: ResolvedConfig;

	private _tsConfigPath;
	private _parsedCommandLine: ts.ParsedCommandLine;

	public setUserConfig(config: UserPluginConfig) {
		if (config?.srcPathFromRoot)
			this.projectSrc = config.srcPathFromRoot;
		if (config?.tsConfigPathFromRoot)
			this.tsConfigPathFromRoot = config.tsConfigPathFromRoot;
	}

	public init(config: ResolvedConfig) {
		if (!this.projectRoot) {
			this.projectRoot = config.root;
		}

		this.projectRootDirectory = jetpack.cwd(this.projectRoot);
		this.projectSrcDirectory  = this.projectRootDirectory.dir(this.projectSrc);
		this.generatedDir         = this.projectSrcDirectory.dir(this.generatedDirName);
		this.isLocalDev           = process.env?.VUE_FRONTEND_UTILS_DEV !== undefined;
		this.viteConfig           = config;
	}

	get tsConfigPath() {
		if (this._tsConfigPath) {
			return this._tsConfigPath;
		}

		const configPath = ts.findConfigFile(this.projectRoot, ts.sys.fileExists, this.tsConfigPathFromRoot);
		if (!configPath) {
			throw new Error("Could not find a valid 'tsconfig.json'. If you're using a different file name, adjust your VueFrontendUtils config to specify it, for example: VueFrontendUtils({ tsConfigPathFromRoot: './my-tsconfig.json' })");
		}

		return this._tsConfigPath = configPath;
	}

	get tsConfig() {
		if (this._parsedCommandLine) {
			return this._parsedCommandLine;
		}

		return this._parsedCommandLine = ts.parseJsonConfigFileContent(ts.readConfigFile(this.tsConfigPath, ts.sys.readFile).config, ts.sys, "./");
	}

	getFilePath(name: keyof FileNameKeys) {
		return this.generatedDir.path(FileNames[name]);
	}

	/**
	 * Checks if the specified file is one that's generated by the plugin.
	 * This is used within things like the HMR handler to prevent infinite loops.
	 * @param {string} file
	 */
	public isGeneratedFile(file: string): boolean {
		for (let key in FileNames) {
			if (file.endsWith(FileNames[key]) || file === FileNames[key]) {
				return true;
			}
		}

		return false;
	}

}

export const PluginConfig = new PluginConfigInstance();
